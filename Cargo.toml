# cargo-features = ["codegen-backend"]

[workspace]
resolver = "2"
members = ["app", "common", "frontend", "server", "tauri", "tauri/src-tauri"]

# need to be applied only to wasm build
[profile.release]
codegen-units = 1
lto = true
opt-level = 3
strip = true

[profile.dev]
opt-level = 0
# [profile.dev.package."*"]
# opt-level = 3

# [profile.dev.package."app"]
# opt-level = 0


[profile.bindev]
inherits = "dev"
# codegen-backend = "cranelift"

[profile.binrelease]
inherits = "release"
lto = "thin"
opt-level = 3
codegen-units = 256


[workspace.dependencies]
leptos = { version = "0.6" }
leptos_meta = { version = "0.6" }
leptos_router = { version = "0.6" }
leptos_axum = { version = "0.6" }

tracing = "0.1.40"
tracing-subscriber = { version = "0.3.18", features = ["env-filter"] }
tracing-subscriber-wasm = "0.1.0"
tracing-journald = "0.3.0"

axum = { version = "0.7", features = ["http2", "ws", "macros"] }
cfg-if = "1"
console_error_panic_hook = "0.1.7"
http = "1"
thiserror = "1"
tokio = { version = "1.33.0", features = ["full"] }
tower = { version = "0.5", features = ["full"] }
tower-http = { version = "0.5", features = ["full"] }
wasm-bindgen = "=0.2.93"
rand = "0.8.5"
leptos-use = "0.13.4"
serde = { version = "1", features = ["derive"] }
bincode = "1"
uuid = { version = "1.10.0", features = ["v4", "serde"] }
serde_urlencoded = "0.7.1"
codee = { version = "0.2.0", features = ["bincode_serde"] }
futures = "0.3"
unicase = "2.7.0"

js-sys = "0.3"
serde-wasm-bindgen = "0.6.5"
wasm-bindgen-futures = "0.4.43"

serde_json = "1"

hmac = "0.12"
sha1 = "0.10"
base64 = "0.22"

dotenvy = "0.15.7"

time = "0.3.36"


[workspace.dependencies.web-sys]
version = "0.3.70"
features = [
    "File",
    "Blob",
    "BlobPropertyBag",
    "Screen",
    "ScreenOrientation",
    "OrientationLockType",
    "RtcPeerConnection",
    "RtcConfiguration",
    "RtcIceServer",
    "MediaDevices",
    "MediaStreamConstraints",
    "MediaStream",
    "MediaStreamTrack",
    "RtcRtpSender",
    "RtcSessionDescription",
    "RtcSessionDescriptionInit",
    "RtcSdpType",
    "RtcPeerConnectionIceEvent",
    "RtcIceCandidate",
    "RtcIceCandidateInit",
    "RtcTrackEvent",
    "RtcPeerConnectionState",
    "RtcIceGatheringState",

    "AudioContext",
    "AnalyserNode",
    "MediaStreamAudioSourceNode",

    "TouchEvent",
    "Touch",
    "TouchList",

    "ShareData",

    "HtmlMediaElement",
    "TimeRanges",
]

# See https://github.com/akesson/cargo-leptos for documentation of all the parameters.

# A leptos project defines which workspace members
# that are used together frontend (lib) & server (bin)
[[workspace.metadata.leptos]]
# this name is used for the wasm, js and css file names
name = "tvmate"

output-name = "tvmate"

# the package in the workspace that contains the server binary (binary crate)
bin-package = "server"

# the package in the workspace that contains the frontend wasm binary (library crate)
lib-package = "frontend"

# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "style/main.scss"

# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "public"

# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "0.0.0.0:3000"

# The port to use for automatic reload monitoring
reload-port = 3001

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# Set by cargo-leptos watch when building with that tool. Controls whether autoreload JS will be included in the head
watch = false

# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"

# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = []

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = []

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false


# The tailwind input file.
#
# Optional, Activates the tailwind build
tailwind-input-file = "style/tailwind.css"

# The tailwind config file.
#
# Optional, defaults to "tailwind.config.js" which if is not present
# is generated for you
tailwind-config-file = "tailwind.config.js"

bin-profile-release = "binrelease"
bin-profile-dev = "bindev"
